// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_codegen.cpp:631

#ifndef _TAO_IDL_COMPANYS_NL2RSW_CPP_
#define _TAO_IDL_COMPANYS_NL2RSW_CPP_


#include "CompanyS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_interface.cpp:1853

class TAO_CompanyModule_Person_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CompanyModule_Person_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_CompanyModule_Person_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
      0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20, 20,
      5,  0, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20,  5, 20, 20, 20,
     20,  0, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CompanyModule_Person_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 12,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 4,
      WORDLIST_SIZE = 17
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"FullName", std::addressof(POA_CompanyModule::Person::FullName_skel), nullptr},
      {"_get_name", std::addressof(POA_CompanyModule::Person::_get_name_skel), 0},
      {"_set_name", std::addressof(POA_CompanyModule::Person::_set_name_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"_get_birthday", std::addressof(POA_CompanyModule::Person::_get_birthday_skel), 0},
      {"_set_birthday", std::addressof(POA_CompanyModule::Person::_set_birthday_skel), nullptr},
      {"_get_firstname", std::addressof(POA_CompanyModule::Person::_get_firstname_skel), 0},
      {"_set_firstname", std::addressof(POA_CompanyModule::Person::_set_firstname_skel), nullptr},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -7,  -2,   5, -10,  -2,   6, -25,   9, -12,  -2, -26, 
      -22,  14,  -1,  -1,  15,  16, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CompanyModule_Person_Perfect_Hash_OpTable tao_CompanyModule_Person_optable;


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:89



POA_CompanyModule::Person::Person ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CompanyModule_Person_optable);
}

POA_CompanyModule::Person::Person (const Person& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_firstname_Person
    : public TAO::Upcall_Command
  {
  public:
    inline _get_firstname_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->firstname ();
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::_get_firstname_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_firstname_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_firstname_Person
    : public TAO::Upcall_Command
  {
  public:
    inline _set_firstname_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->firstname (
        arg_1);
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::_set_firstname_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_firstname;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_firstname)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_firstname_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_name_Person
    : public TAO::Upcall_Command
  {
  public:
    inline _get_name_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->name ();
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::_get_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_name_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_name_Person
    : public TAO::Upcall_Command
  {
  public:
    inline _set_name_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->name (
        arg_1);
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::_set_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_name)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_name_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_birthday_Person
    : public TAO::Upcall_Command
  {
  public:
    inline _get_birthday_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CompanyModule::YearMonthDay>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CompanyModule::YearMonthDay> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->birthday ();
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::_get_birthday_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CompanyModule::YearMonthDay>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_birthday_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_birthday_Person
    : public TAO::Upcall_Command
  {
  public:
    inline _set_birthday_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CompanyModule::YearMonthDay>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CompanyModule::YearMonthDay> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->birthday (
        arg_1);
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::_set_birthday_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CompanyModule::YearMonthDay>::in_arg_val _tao_birthday;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_birthday)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_birthday_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class FullName_Person
    : public TAO::Upcall_Command
  {
  public:
    inline FullName_Person (
      POA_CompanyModule::Person * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->FullName ();
    }
  
  private:
    POA_CompanyModule::Person * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Person::FullName_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::Person * const impl =
    dynamic_cast<POA_CompanyModule::Person *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  FullName_Person command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CompanyModule::Person::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:CompanyModule/Person:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CompanyModule::Person::_interface_repository_id () const
{
  return "IDL:CompanyModule/Person:1.0";
}


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:394



void POA_CompanyModule::Person::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:354



CompanyModule::Person *
POA_CompanyModule::Person::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::CompanyModule::Person>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_interface.cpp:1853

class TAO_CompanyModule_Employee_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CompanyModule_Employee_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_CompanyModule_Employee_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
      0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20, 20,
      5,  0, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20,  5, 20, 20, 20,  5, 20, 20, 20,
     20,  0, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CompanyModule_Employee_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 15,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 5,
      WORDLIST_SIZE = 20
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"FullName", std::addressof(POA_CompanyModule::Person::FullName_skel), nullptr},
      {"_get_name", std::addressof(POA_CompanyModule::Person::_get_name_skel), 0},
      {"_set_name", std::addressof(POA_CompanyModule::Person::_set_name_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"_get_salary", std::addressof(POA_CompanyModule::Employee::_get_salary_skel), 0},
      {"_set_salary", std::addressof(POA_CompanyModule::Employee::_set_salary_skel), nullptr},
      {"_get_birthday", std::addressof(POA_CompanyModule::Person::_get_birthday_skel), 0},
      {"_set_birthday", std::addressof(POA_CompanyModule::Person::_set_birthday_skel), nullptr},
      {"_get_firstname", std::addressof(POA_CompanyModule::Person::_get_firstname_skel), 0},
      {"_set_firstname", std::addressof(POA_CompanyModule::Person::_set_firstname_skel), nullptr},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"payout", std::addressof(POA_CompanyModule::Employee::payout_skel), nullptr},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
            {
              const TAO_operation_db_entry  *resword; 

              switch (key)
                {
                case   5:
                  resword = &wordlist[5]; break;
                case   8:
                  resword = &wordlist[6]; break;
                case   9:
                  resword = &wordlist[7];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[8];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  10:
                  resword = &wordlist[9]; break;
                case  11:
                  resword = &wordlist[10];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[11];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  13:
                  resword = &wordlist[12];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[13];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  14:
                  resword = &wordlist[14];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[15];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  15:
                  resword = &wordlist[16]; break;
                case  16:
                  resword = &wordlist[17]; break;
                case  18:
                  resword = &wordlist[18]; break;
                case  19:
                  resword = &wordlist[19]; break;
                default: return 0;
                }
              if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1))
                return resword;
              return 0;
            }
        }
    }
  return 0;
}

static TAO_CompanyModule_Employee_Perfect_Hash_OpTable tao_CompanyModule_Employee_optable;


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:89



POA_CompanyModule::Employee::Employee ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CompanyModule_Employee_optable);
}

POA_CompanyModule::Employee::Employee (const Employee& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CompanyModule::Person (rhs)
{
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_salary_Employee
    : public TAO::Upcall_Command
  {
  public:
    inline _get_salary_Employee (
      POA_CompanyModule::Employee * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Double>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->salary ();
    }
  
  private:
    POA_CompanyModule::Employee * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Employee::_get_salary_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Double>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::Employee * const impl =
    dynamic_cast<POA_CompanyModule::Employee *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_salary_Employee command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_salary_Employee
    : public TAO::Upcall_Command
  {
  public:
    inline _set_salary_Employee (
      POA_CompanyModule::Employee * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->salary (
        arg_1);
    }
  
  private:
    POA_CompanyModule::Employee * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Employee::_set_salary_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_salary;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_salary)
    };
  
  POA_CompanyModule::Employee * const impl =
    dynamic_cast<POA_CompanyModule::Employee *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_salary_Employee command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class payout_Employee
    : public TAO::Upcall_Command
  {
  public:
    inline payout_Employee (
      POA_CompanyModule::Employee * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->payout ();
    }
  
  private:
    POA_CompanyModule::Employee * const servant_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::Employee::payout_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::Employee * const impl =
    dynamic_cast<POA_CompanyModule::Employee *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  payout_Employee command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CompanyModule::Employee::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:CompanyModule/Person:1.0") == 0 ||
      std::strcmp (value, "IDL:CompanyModule/Employee:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CompanyModule::Employee::_interface_repository_id () const
{
  return "IDL:CompanyModule/Employee:1.0";
}


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:394



void POA_CompanyModule::Employee::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:354



CompanyModule::Employee *
POA_CompanyModule::Employee::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::CompanyModule::Employee>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_interface.cpp:1853

class TAO_CompanyModule_ImpFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CompanyModule_ImpFactory_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_CompanyModule_ImpFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20,  0, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20, 20,
      0,  5, 20, 20, 20, 20, 20, 20, 20, 20,
      0, 20, 20, 20, 20, 20,  0, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CompanyModule_ImpFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"",0,0},
      {"CreatePerson", std::addressof(POA_CompanyModule::ImpFactory::CreatePerson_skel), nullptr},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"",0,0},{"",0,0},{"",0,0},
      {"CreateEmployee", std::addressof(POA_CompanyModule::ImpFactory::CreateEmployee_skel), nullptr},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CompanyModule_ImpFactory_Perfect_Hash_OpTable tao_CompanyModule_ImpFactory_optable;


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:89



POA_CompanyModule::ImpFactory::ImpFactory ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CompanyModule_ImpFactory_optable);
}

POA_CompanyModule::ImpFactory::ImpFactory (const ImpFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class CreatePerson_ImpFactory
    : public TAO::Upcall_Command
  {
  public:
    inline CreatePerson_ImpFactory (
      POA_CompanyModule::ImpFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CompanyModule::Person>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CompanyModule::Person> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->CreatePerson ();
    }
  
  private:
    POA_CompanyModule::ImpFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::ImpFactory::CreatePerson_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CompanyModule::Person>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::ImpFactory * const impl =
    dynamic_cast<POA_CompanyModule::ImpFactory *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  CreatePerson_ImpFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CompanyModule
{
  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\upcall_command_ss.cpp:79

  class CreateEmployee_ImpFactory
    : public TAO::Upcall_Command
  {
  public:
    inline CreateEmployee_ImpFactory (
      POA_CompanyModule::ImpFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CompanyModule::Employee>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CompanyModule::Employee> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->CreateEmployee ();
    }
  
  private:
    POA_CompanyModule::ImpFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_operation\operation_ss.cpp:167

void POA_CompanyModule::ImpFactory::CreateEmployee_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CompanyModule::Employee>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CompanyModule::ImpFactory * const impl =
    dynamic_cast<POA_CompanyModule::ImpFactory *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  CreateEmployee_ImpFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CompanyModule::ImpFactory::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:CompanyModule/ImpFactory:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CompanyModule::ImpFactory::_interface_repository_id () const
{
  return "IDL:CompanyModule/ImpFactory:1.0";
}


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:394



void POA_CompanyModule::ImpFactory::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ss.cpp:354



CompanyModule::ImpFactory *
POA_CompanyModule::ImpFactory::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::CompanyModule::ImpFactory>::unchecked_narrow (obj.in ());
    }
  return {};
}

#endif /* ifndef */

