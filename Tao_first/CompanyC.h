// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_codegen.cpp:148

#ifndef _TAO_IDL_COMPANYC_TLE9JZ_H_
#define _TAO_IDL_COMPANYC_TLE9JZ_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_root\root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_module\module_ch.cpp:34

namespace CompanyModule
{
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:258

  

  struct TimePoint;
  using TimePoint_var = ::TAO_Fixed_Var_T<TimePoint>;
  using TimePoint_out = TimePoint&;

  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_structure\structure_ch.cpp:47

  

  struct  TimePoint
  {
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:297

    
    using _var_type = TimePoint_var;
    using _out_type = TimePoint_out;
    
    ::CORBA::LongLong milliseconds_since_epoch;
  };
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:258

  

  struct YearMonthDay;
  using YearMonthDay_var = ::TAO_Fixed_Var_T<YearMonthDay>;
  using YearMonthDay_out = YearMonthDay&;

  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_structure\structure_ch.cpp:47

  

  struct  YearMonthDay
  {
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:297

    
    using _var_type = YearMonthDay_var;
    using _out_type = YearMonthDay_out;
    
    ::CORBA::Long year;
    ::CORBA::UShort month;
    ::CORBA::UShort day;
  };
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_interface.cpp:742

  

#if !defined (_COMPANYMODULE_PERSON__VAR_OUT_CH_)
#define _COMPANYMODULE_PERSON__VAR_OUT_CH_

  class Person;
  using Person_ptr = Person*;
  using Person_var = TAO_Objref_Var_T<Person>;
  using Person_out = TAO_Objref_Out_T<Person>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class  Person
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Person>;
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:297

    using _ptr_type = Person_ptr;
    using _var_type = Person_var;
    using _out_type = Person_out;

    // The static operations.
    static Person_ptr _duplicate (Person_ptr obj);

    static void _tao_release (Person_ptr obj);

    static Person_ptr _narrow (::CORBA::Object_ptr obj);
    static Person_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Person_ptr _nil ();

    virtual char * firstname ();

    virtual void firstname (
      const char * firstname);

    virtual char * name ();

    virtual void name (
      const char * name);

    virtual ::CompanyModule::YearMonthDay birthday ();

    virtual void birthday (
      const ::CompanyModule::YearMonthDay & birthday);

    virtual char * FullName ();

    
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Person ();

    // Concrete non-local interface only.
    Person (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Person (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Person () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Person (const Person &) = delete;
    Person (Person &&) = delete;
    Person &operator= (const Person &) = delete;
    Person &operator= (Person &&) = delete;
  };
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_interface.cpp:742

  

#if !defined (_COMPANYMODULE_EMPLOYEE__VAR_OUT_CH_)
#define _COMPANYMODULE_EMPLOYEE__VAR_OUT_CH_

  class Employee;
  using Employee_ptr = Employee*;
  using Employee_var = TAO_Objref_Var_T<Employee>;
  using Employee_out = TAO_Objref_Out_T<Employee>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class  Employee
    : public virtual ::CompanyModule::Person
  
  {
  public:
    friend class TAO::Narrow_Utils<Employee>;
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:297

    using _ptr_type = Employee_ptr;
    using _var_type = Employee_var;
    using _out_type = Employee_out;

    // The static operations.
    static Employee_ptr _duplicate (Employee_ptr obj);

    static void _tao_release (Employee_ptr obj);

    static Employee_ptr _narrow (::CORBA::Object_ptr obj);
    static Employee_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Employee_ptr _nil ();

    virtual ::CORBA::Double salary ();

    virtual void salary (
      ::CORBA::Double salary);

    virtual void payout ();

    
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Employee ();

    // Concrete non-local interface only.
    Employee (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Employee (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Employee () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Employee (const Employee &) = delete;
    Employee (Employee &&) = delete;
    Employee &operator= (const Employee &) = delete;
    Employee &operator= (Employee &&) = delete;
  };
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_interface.cpp:742

  

#if !defined (_COMPANYMODULE_IMPFACTORY__VAR_OUT_CH_)
#define _COMPANYMODULE_IMPFACTORY__VAR_OUT_CH_

  class ImpFactory;
  using ImpFactory_ptr = ImpFactory*;
  using ImpFactory_var = TAO_Objref_Var_T<ImpFactory>;
  using ImpFactory_out = TAO_Objref_Out_T<ImpFactory>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class  ImpFactory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ImpFactory>;
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_type.cpp:297

    using _ptr_type = ImpFactory_ptr;
    using _var_type = ImpFactory_var;
    using _out_type = ImpFactory_out;

    // The static operations.
    static ImpFactory_ptr _duplicate (ImpFactory_ptr obj);

    static void _tao_release (ImpFactory_ptr obj);

    static ImpFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static ImpFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ImpFactory_ptr _nil ();

    virtual ::CompanyModule::Person_ptr CreatePerson ();

    virtual ::CompanyModule::Employee_ptr CreateEmployee ();

    
    // TAO_IDL - Generated from
    // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    ImpFactory ();

    // Concrete non-local interface only.
    ImpFactory (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ImpFactory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~ImpFactory () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    ImpFactory (const ImpFactory &) = delete;
    ImpFactory (ImpFactory &&) = delete;
    ImpFactory &operator= (const ImpFactory &) = delete;
    ImpFactory &operator= (ImpFactory &&) = delete;
  };


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_module\module_ch.cpp:62


} // module CompanyModule
// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::CompanyModule::TimePoint>
    : public
        Fixed_Size_Arg_Traits_T<
            ::CompanyModule::TimePoint,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::CompanyModule::YearMonthDay>
    : public
        Fixed_Size_Arg_Traits_T<
            ::CompanyModule::YearMonthDay,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:142

  

#if !defined (_COMPANYMODULE_PERSON__ARG_TRAITS_)
#define _COMPANYMODULE_PERSON__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CompanyModule::Person>
    : public Object_Arg_Traits_T<
        ::CompanyModule::Person_ptr,
        ::CompanyModule::Person_var,
        ::CompanyModule::Person_out,
        TAO::Objref_Traits<CompanyModule::Person>,
        TAO::Any_Insert_Policy_Noop>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:142

  

#if !defined (_COMPANYMODULE_EMPLOYEE__ARG_TRAITS_)
#define _COMPANYMODULE_EMPLOYEE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CompanyModule::Employee>
    : public Object_Arg_Traits_T<
        ::CompanyModule::Employee_ptr,
        ::CompanyModule::Employee_var,
        ::CompanyModule::Employee_out,
        TAO::Objref_Traits<CompanyModule::Employee>,
        TAO::Any_Insert_Policy_Noop>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:142

  

#if !defined (_COMPANYMODULE_IMPFACTORY__ARG_TRAITS_)
#define _COMPANYMODULE_IMPFACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CompanyModule::ImpFactory>
    : public Object_Arg_Traits_T<
        ::CompanyModule::ImpFactory_ptr,
        ::CompanyModule::ImpFactory_var,
        ::CompanyModule::ImpFactory_out,
        TAO::Objref_Traits<CompanyModule::ImpFactory>,
        TAO::Any_Insert_Policy_Noop>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMPANYMODULE_PERSON__TRAITS_)
#define _COMPANYMODULE_PERSON__TRAITS_

  template<>
  struct  Objref_Traits< ::CompanyModule::Person>
  {
    static ::CompanyModule::Person_ptr duplicate (::CompanyModule::Person_ptr p);
    static void release (::CompanyModule::Person_ptr p);
    static ::CompanyModule::Person_ptr nil ();
    static ::CORBA::Boolean marshal (const ::CompanyModule::Person_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COMPANYMODULE_EMPLOYEE__TRAITS_)
#define _COMPANYMODULE_EMPLOYEE__TRAITS_

  template<>
  struct  Objref_Traits< ::CompanyModule::Employee>
  {
    static ::CompanyModule::Employee_ptr duplicate (::CompanyModule::Employee_ptr p);
    static void release (::CompanyModule::Employee_ptr p);
    static ::CompanyModule::Employee_ptr nil ();
    static ::CORBA::Boolean marshal (const ::CompanyModule::Employee_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COMPANYMODULE_IMPFACTORY__TRAITS_)
#define _COMPANYMODULE_IMPFACTORY__TRAITS_

  template<>
  struct  Objref_Traits< ::CompanyModule::ImpFactory>
  {
    static ::CompanyModule::ImpFactory_ptr duplicate (::CompanyModule::ImpFactory_ptr p);
    static void release (::CompanyModule::ImpFactory_ptr p);
    static ::CompanyModule::ImpFactory_ptr nil ();
    static ::CORBA::Boolean marshal (const ::CompanyModule::ImpFactory_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_structure\cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CompanyModule::TimePoint &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CompanyModule::TimePoint &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_structure\cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CompanyModule::YearMonthDay &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CompanyModule::YearMonthDay &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CompanyModule::Person_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CompanyModule::Person_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CompanyModule::Employee_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CompanyModule::Employee_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_visitor_interface\cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CompanyModule::ImpFactory_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CompanyModule::ImpFactory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// D:\gitRepos\ACE_TAO\TAO\TAO_IDL\be\be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "CompanyC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

